#!/usr/bin/env bash

set -eu
shopt -s lastpipe

export LANG=C

# Arbitrary but unique message id
msgId="991049"
volume=0

function volume-bluetooth {
	local method
	[[ $1 == up ]] && method=VolumeUp || method=VolumeDown
	dbus-send \
		--print-reply --type=method_call \
		--system --dest=org.bluez \
		/org/bluez/hci0/dev_"$2" org.bluez.MediaControl1."$method" >/dev/null
}

function getvolumelevel {
    SINK=$(pactl list short | grep RUNNING | sed -e 's,^\([0-9][0-9]*\)[^0-9].*,\1,')
    volume_before=$(pactl list sinks | grep '^[[:space:]]Volume:' | head -n $(( $SINK + 1 )) | tail -n 1 | sed -e 's,.* \([0-9][0-9]*\)%.*,\1,')
    if [[ $volume_before == 150 ]]; then
        volume_before=$(pactl list sinks | grep '^[[:space:]]Volume:' | head -n $(( $SINK - 1 )) | tail -n 1 | sed -e 's,.* \([0-9][0-9]*\)%.*,\1,')
    fi

    getvolumelevel=$volume_before
}

function getmuted {
    mute=$(pactl list sinks | grep '^[[:space:]]Mute:' | head -n $(( $SINK + 1 )) | tail -n 1 | awk -F"[ ',]+" '/Mute:/{print $2}')
    getmuted=$mute
}

function send-volume-level {
    dunstify -a "changeVolume" -u low -i audio-volume-high -r "$msgId" \
        "Volume: $1%" $(/bin/bash ~/bin/getProgressString 10 "<b>ðŸ”Š</b>" "ðŸ”ˆ" $1)
}

function send-muted {
    dunstify -a "changeVolume" -u low -i audio-volume-muted -r "$msgId" "Volume muted" "ðŸ”‡"
}

function volume-pulseaudio {
    local sign
    local volume_before

    getvolumelevel
    volume_before=$getvolumelevel

    [[ $1 == up ]] && sign="+" || sign="-"
    if [[ volume_before -gt 114 && $1 == up ]]; then
        return
    fi
    pactl set-sink-volume @DEFAULT_SINK@ "$sign"5%

    getvolumelevel
    volume=$getvolumelevel
    getmuted
    mute=$getmuted

    if [[ $volume == 0 || "$mute" == "yes" ]]; then
        # Show the sound muted notification
        send-muted
    else
        send-volume-level $volume
    fi

    # Play the volume change sound
    canberra-gtk-play -i audio-volume-change -d "changeVolume"
}

# Volume up/down via:
#  - bluetooth AVRCP (if avilable and default sink)
#  - pulseaudio (otherwise)
#
# Motivation: lowering volume in software degrades quality as the upper
# bits are unused.
function action-volume {
    if [[ ${1-} != @(up|down) ]]; then
        echo 'up|down expected'
        exit 1
    fi

    if [[ $(pactl info) =~ "Default Sink: bluez_sink."([0-9A-F_]*)".a2dp_sink" ]]; then
        bt_addr="${BASH_REMATCH[1]}"
        volume-bluetooth "$1" "$bt_addr" && exit 0
    fi

    volume-pulseaudio "$1"
}

function action-mute     { 
    pactl set-sink-mute   @DEFAULT_SINK@   toggle;

    getvolumelevel
    volume=$getvolumelevel
    getmuted
    mute=$getmuted

    if [[ "$mute" == "yes" ]]; then
        send-muted
    else
        send-volume-level $volume
    fi
}
function action-mic-mute { pactl set-source-mute @DEFAULT_SOURCE@ toggle; }

# Listen for MPRIS events and remember which player we interacted with last
function action-mpris-daemon {
    playerctl --all-players --follow --format '{{playerName}} {{status}}' status \
        | while read -r player status; do
            if [[ $status == @(Paused|Playing) ]]; then
                printf "%s\n" "$player" >"${XDG_RUNTIME_DIR}/liskin-media-last"
            fi
        done
    }

function get-mpris-playing {
    playerctl --all-players --format '{{playerName}} {{status}}' status \
        | while read -r player status; do
            if [[ $status == Playing ]]; then
                printf "%s\n" "$player"
                return
            fi
        done

        return 1
    }

function get-mpris-one-playing-or-paused {
    local -a players=()

    playerctl --all-players --format '{{playerName}} {{status}}' status \
        | while read -r player status; do
            if [[ $status == @(Paused|Playing) ]]; then
                players+=("$player")
            fi
        done

        if (( "$(( ${players[@]+${#players[@]}} ))" == 1 )); then
            echo "${players[0]}"
        else
            return 1
        fi
    }

function get-mpris-last {
    if [[ -f "${XDG_RUNTIME_DIR}/liskin-media-last" ]]; then
        echo "$(< "${XDG_RUNTIME_DIR}/liskin-media-last")"
    else
        return 1
    fi
}

function get-mpris-smart {
    get-mpris-playing || get-mpris-one-playing-or-paused || get-mpris-last
}

function action-play { p=$(get-mpris-smart); playerctl -p "$p" play-pause; }
function action-stop { playerctl -a stop; }
function action-next { p=$(get-mpris-playing); playerctl -p "$p" next; }
function action-prev { p=$(get-mpris-playing); playerctl -p "$p" previous; }

if [[ $(type -t "action-${1-}") == function ]]; then
    "action-$1" "${@:2}"
else
    echo "unexpected action: ${1-}"
fi
